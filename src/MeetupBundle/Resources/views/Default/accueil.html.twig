{% extends 'base.html.twig' %}


{% block body %}



<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Tableau de bord
            <small>Panneau de contrôle</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
            <li class="active">Dashboard</li>
        </ol>
    </section>

    <!-- Liste déroulante : choix de semaine -->
    <div class="col-md-6">
        {% if datedExtract is defined %}
        {% for dated in datedFormat %}
        <a href='{{ path("user_accueil_retro", { 'retroFin': datedExtract[loop.index0]['dateExtract'], 'retroDeb': datedExtract[loop.index]['dateExtract'] }) }}'>{{dated}}</a><br/>
        {% endfor %}
        {% endif %}
    </div>

        <!-- Liste déroulante : choix de semaine -->
        <div class="dropdown list_date">
            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
            Archives
            <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                {% for dated in datedFormat %}
                <li><a href="{{ path("user_accueil_retro", { 'retroFin': datedExtract[loop.index0]['dateExtract'], 'retroDeb': datedExtract[loop.index]['dateExtract'] }) }}">{{dated}}</a></li>
                {% endfor %}
            </ul>
        </div>
    <div class="row">
        <div class="col-md-5"></div>
        <div class="col-md-5 but-extr">
            <a href="{{ path('topic') }}"><button type="button" class="btn btn-success">Nouvelle extraction</button></a>
        </div>
        <div class="col-md-1">
            <a href="#" onclick="window.print(); return false;"><img src="{{ asset('img/pdf.png') }}"></a>
        </div>
    </div>


    <!-- Main content -->
    <section class="content">



      <!-- Small boxes (Stat box) -->
      <div class="row">
        <div class="col-md-12">
            <a href="{{ path('user_accueilParis') }}"><button type="button" class="btn btn-danger">Retirer Paris</button></a>
          <div id="dashboard">
            <div class="titre-spark">
              <h2 class="titre-dash1">Répartition des membres</h2>

            </div>
        </div>
        <!-- /.row -->
        <!-- Main row -->
        {# <div id="container" class="spark" style="min-width: 310px; height: 400px;"></div> #}
        <div id="container" class="spark" style="min-width: 310px; height: 400px;"></div>
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<!-- Control Sidebar -->

<!-- /.control-sidebar -->
<!-- Add the sidebar's background. This div must be placed
immediately after the control sidebar -->
<div class="control-sidebar-bg"></div>


{% endblock body %}

{% block javascript %}
<script   src="https://code.jquery.com/jquery-2.2.4.min.js"   integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="   crossorigin="anonymous"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script type="text/JavaScript">
$(function () {
    $('#container').highcharts({
        title: {
            text: 'Evolution du nombre de groupes créés sur la plateforme Meetup par ville',
            x: -20 //center
        },
        subtitle: {
            text: 'Source: Meetup',
            x: -20
        },
        xAxis: {
            categories: ['{{ datte[6] }}', '{{ datte[5] }}', '{{ datte[4] }}', '{{ datte[3] }}', '{{ datte[2] }}', '{{ datte[1] }}', '{{ datte[0] }}']
        },
        yAxis: {
            title: {
                text: 'Membres'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {
            valueSuffix: 'Meetups Créés'
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle',
            borderWidth: 0
        },
        series: [{
            name: 'La Loupe',
            data: [ {{ evoLoupe[6] }}, {{ evoLoupe[5] }}, {{ evoLoupe[4]}}, {{ evoLoupe[3]}}, {{ evoLoupe[2]}}, {{ evoLoupe[1]}}, {{ evoLoupe[0]}}]
        }, {
            name: 'Chartres',
            data: [ {{ evoChartres[6] }}, {{ evoChartres[5] }}, {{ evoChartres[4]}}, {{ evoChartres[3]}}, {{ evoChartres[2]}}, {{ evoChartres[1]}}, {{ evoChartres[0]}}]
        }, {
            name: 'Fontainebleau',
            data: [ {{ evoFontainebleau[6] }}, {{ evoFontainebleau[5] }}, {{ evoFontainebleau[4]}}, {{ evoFontainebleau[3]}}, {{ evoFontainebleau[2]}}, {{ evoFontainebleau[1]}}, {{ evoFontainebleau[0]}}]
        }, {
            name: 'Orléans',
            data: [ {{ evoOrleans[6] }}, {{ evoOrleans[5] }}, {{ evoOrleans[4]}}, {{ evoOrleans[3]}}, {{ evoOrleans[2]}}, {{ evoOrleans[1]}}, {{ evoOrleans[0]}}]
        }, {
            name: 'Lyon',
            data: [ {{ evoLyon[6] }}, {{ evoLyon[5] }}, {{ evoLyon[4]}}, {{ evoLyon[3]}}, {{ evoLyon[2]}}, {{ evoLyon[1]}}, {{ evoLyon[0]}}]
        }, {
            name: 'Bordeaux',
            data: [ {{ evoBordeaux[6] }}, {{ evoBordeaux[5] }}, {{ evoBordeaux[4]}}, {{ evoBordeaux[3]}}, {{ evoBordeaux[2]}}, {{ evoBordeaux[1]}}, {{ evoBordeaux[0]}}]
        }, {
            name: 'Toulouse',
            data: [ {{ evoToulouse[6] }}, {{ evoToulouse[5] }}, {{ evoToulouse[4]}}, {{ evoToulouse[3]}}, {{ evoToulouse[2]}}, {{ evoToulouse[1]}}, {{ evoToulouse[0]}}]
        }, {
            name: 'Paris',
            data: [ {{ evoParis[6] }}, {{ evoParis[5] }}, {{ evoParis[4]}}, {{ evoParis[3]}}, {{ evoParis[2]}}, {{ evoParis[1]}}, {{ evoParis[0]}}]
        }, {
            name: 'Strasbourg',
            data: [ {{ evoStrasbourg[6] }}, {{ evoStrasbourg[5] }}, {{ evoStrasbourg[4]}}, {{ evoStrasbourg[3]}}, {{ evoStrasbourg[2]}}, {{ evoStrasbourg[1]}}, {{ evoStrasbourg[0]}}]
        }, {
            name: 'Nantes',
            data: [ {{ evoNantes[6] }}, {{ evoNantes[5] }}, {{ evoNantes[4]}}, {{ evoNantes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }, {
            name: 'Nice',
            data: [ {{ evoNice[6] }}, {{ evoNice[5] }}, {{ evoNice[4]}}, {{ evoNice[3]}}, {{ evoNice[2]}}, {{ evoNice[1]}}, {{ evoNice[0]}}]
        }, {
            name: 'Montpellier',
            data: [ {{ evoMontpellier[6] }}, {{ evoMontpellier[5] }}, {{ evoMontpellier[4]}}, {{ evoMontpellier[3]}}, {{ evoMontpellier[2]}}, {{ evoMontpellier[1]}}, {{ evoMontpellier[0]}}]
        }, {
            name: 'Rennes',
            data: [ {{ evoRennes[6] }}, {{ evoRennes[5] }}, {{ evoRennes[4]}}, {{ evoRennes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }, {
            name: 'Lille',
            data: [ {{ evoNantes[6] }}, {{ evoNantes[5] }}, {{ evoNantes[4]}}, {{ evoNantes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }, {
            name: 'Bruxelles',
            data: [ {{ evoNantes[6] }}, {{ evoNantes[5] }}, {{ evoNantes[4]}}, {{ evoNantes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }, {
            name: 'Luxembourg',
            data: [ {{ evoNantes[6] }}, {{ evoNantes[5] }}, {{ evoNantes[4]}}, {{ evoNantes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }, {
            name: 'Genève',
            data: [ {{ evoNantes[6] }}, {{ evoNantes[5] }}, {{ evoNantes[4]}}, {{ evoNantes[3]}}, {{ evoNantes[2]}}, {{ evoNantes[1]}}, {{ evoNantes[0]}}]
        }]
    });
});
</script>
{% endblock %}


{% block javascript_end %}

{# <!-- jQuery UI 1.11.4 -->
<script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
<!-- Resolve conflict in jQuery UI tooltip with Bootstrap tooltip -->
<script>
$.widget.bridge('uibutton', $.ui.button);
</script>
<!-- Bootstrap 3.3.6 -->
<script src="{{ asset('bootstrap/js/bootstrap.min.js') }}"></script>
<!-- Morris.js charts -->
<script src="{{ asset('https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js') }}"></script>
<script src="{{ asset('plugins/morris/morris.min.js') }}"></script>
<!-- Sparkline -->
<script src="{{ asset('plugins/sparkline/jquery.sparkline.min.js') }}"></script>
<!-- jvectormap -->
<script src="{{ asset('plugins/jvectormap/jquery-jvectormap-1.2.2.min.js') }}"></script>
<script src="{{ asset('plugins/jvectormap/jquery-jvectormap-world-mill-en.js') }}"></script>
<!-- jQuery Knob Chart -->
<script src="{{ asset('plugins/knob/jquery.knob.js') }}"></script>
<!-- daterangepicker -->
<script src="{{ asset('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js') }}"></script>
<script src="{{ asset('plugins/daterangepicker/daterangepicker.js') }}"></script>
<!-- datepicker -->
<script src="{{ asset('plugins/datepicker/bootstrap-datepicker.js') }}"></script>
<!-- Bootstrap WYSIHTML5 -->
<script src="{{ asset('plugins/bootstrap-wysihtml5/bootstrap3-wysihtml5.all.min.js') }}"></script>
<!-- Slimscroll -->
<script src="{{ asset('plugins/slimScroll/jquery.slimscroll.min.js') }}"></script>
<!-- FastClick -->
<script src="{{ asset('plugins/fastclick/fastclick.js') }}"></script>
<!-- AdminLTE App -->
<script src="{{ asset('js/app.min.js') }}"></script>
<!-- AdminLTE dashboard demo (This is only for demo purposes) -->
<script src="{{ asset('js/pages/dashboard.js') }}"></script>
<!-- AdminLTE for demo purposes -->
<script src="{{ asset('js/demo.js') }}"></script>
<!-- script pour les graphiques -->
<script src="http://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.1/Chart.min.js"></script>
<script src="{{ asset('js/graph.js') }}"></script>
#}





<!-- Mon script pour le graphique d'acceuil -->
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
function dashboard(id, fData){
    var barColor = 'steelblue';
    function segColor(c){ return {php:"#8694D1", JavaScript:"#F0DB4F",Ruby:"#EC1622", Ios:"#97C024"}[c]; }

    // compute total for each state.
    fData.forEach(function(d){d.total=d.freq.php+d.freq.JavaScript+d.freq.Ruby+d.freq.Ios;});

    // function to handle histogram.
    function histoGram(fD){
        var hG={},    hGDim = {t: 60, r: 0, b: 30, l: 0};
        hGDim.w = 600 - hGDim.l - hGDim.r,
        hGDim.h = 300 - hGDim.t - hGDim.b;

        //create svg for histogram.
        var hGsvg = d3.select(id).append("svg")
        .attr("width", hGDim.w + hGDim.l + hGDim.r)
        .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
        .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

        // create function for x-axis mapping.
        var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
        .domain(fD.map(function(d) { return d[0]; }));

        // Add x-axis to the histogram svg.
        hGsvg.append("g").attr("class", "x axis")
        .attr("transform", "translate(0," + hGDim.h + ")")
        .call(d3.svg.axis().scale(x).orient("bottom"));

        // Create function for y-axis map.
        var y = d3.scale.linear().range([hGDim.h, 0])
        .domain([0, d3.max(fD, function(d) { return d[1]; })]);

        // Create bars for histogram to contain rectangles and freq labels.
        var bars = hGsvg.selectAll(".bar").data(fD).enter()
        .append("g").attr("class", "bar");

        //create the rectangles.
        bars.append("rect")
        .attr("x", function(d) { return x(d[0]); })
        .attr("y", function(d) { return y(d[1]); })
        .attr("width", x.rangeBand())
        .attr("height", function(d) { return hGDim.h - y(d[1]); })
        .attr('fill',barColor)
        .on("mouseover",mouseover)// mouseover is defined below.
        .on("mouseout",mouseout);// mouseout is defined below.

        //Create the frequency labels above the rectangles.
        bars.append("text").text(function(d){ return d3.format(",")(d[1])})
        .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
        .attr("y", function(d) { return y(d[1])-5; })
        .attr("text-anchor", "middle")
        .on("mouseover",mouseover)// mouseover is defined below.
        .on("mouseout",mouseout);

        function mouseover(d){  // utility function to be called on mouseover.
            // filter for selected state.
            var st = fData.filter(function(s){ return s.State == d[0];})[0],
            nD = d3.keys(st.freq).map(function(s){ return {type:s, freq:st.freq[s]};});

            // call update functions of pie-chart and legend.
            pC.update(nD);
            leg.update(nD);
        }

        function mouseout(d){    // utility function to be called on mouseout.
            // reset the pie-chart and legend.
            pC.update(tF);
            leg.update(tF);
        }

        // create function to update the bars. This will be used by pie-chart.
        hG.update = function(nD, color){
            // update the domain of the y-axis map to reflect change in frequencies.
            y.domain([0, d3.max(nD, function(d) { return d[1]; })]);

            // Attach the new data to the bars.
            var bars = hGsvg.selectAll(".bar").data(nD);

            // transition the height and color of rectangles.
            bars.select("rect").transition().duration(500)
            .attr("y", function(d) {return y(d[1]); })
            .attr("height", function(d) { return hGDim.h - y(d[1]); })
            .attr("fill", color);

            // transition the frequency labels location and change value.
            bars.select("text").transition().duration(500)
            .text(function(d){ return d3.format(",")(d[1])})
            .attr("y", function(d) {return y(d[1])-5; });
        }
        return hG;
    }

    // function to handle pieChart.
    function pieChart(pD){
        var pC ={},    pieDim ={w:250, h: 250};
        pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

        // create svg for pie chart.
        var piesvg = d3.select(id).append("svg")
        .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
        .attr("transform", "translate("+pieDim.w/2+","+pieDim.h/2+")");

        // create function to draw the arcs of the pie slices.
        var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

        // create a function to compute the pie slice angles.
        var pie = d3.layout.pie().sort(null).value(function(d) { return d.freq; });

        // Draw the pie slices.
        piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
        .each(function(d) { this._current = d; })
        .style("fill", function(d) { return segColor(d.data.type); })
        .on("mouseover",mouseover).on("mouseout",mouseout);

        // create function to update pie-chart. This will be used by histogram.
        pC.update = function(nD){
            piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
            .attrTween("d", arcTween);
        }
        // Utility function to be called on mouseover a pie slice.
        function mouseover(d){
            // call the update function of histogram with new data.
            hG.update(fData.map(function(v){
                return [v.State,v.freq[d.data.type]];}),segColor(d.data.type));
            }
            //Utility function to be called on mouseout a pie slice.
            function mouseout(d){
                // call the update function of histogram with all data.
                hG.update(fData.map(function(v){
                    return [v.State,v.total];}), barColor);
                }
                // Animating the pie-slice requiring a custom function which specifies
                // how the intermediate paths should be drawn.
                function arcTween(a) {
                    var i = d3.interpolate(this._current, a);
                    this._current = i(0);
                    return function(t) { return arc(i(t));    };
                }
                return pC;
            }

            // function to handle legend.
            function legend(lD){
                var leg = {};

                // create table for legend.
                var legend = d3.select(id).append("table").attr('class','legend');

                // create one row per segment.
                var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                // create the first column for each segment.
                tr.append("td").append("svg").attr("width", '32').attr("height", '16').append("rect")
                .attr("width", '32').attr("height", '16')
                .attr("fill",function(d){ return segColor(d.type); });

                // create the second column for each segment.
                tr.append("td").text(function(d){ return d.type;});

                // create the third column for each segment.
                tr.append("td").attr("class",'legendFreq')
                .text(function(d){ return d3.format(",")(d.freq);});

                // create the fourth column for each segment.
                tr.append("td").attr("class",'legendPerc')
                .text(function(d){ return getLegend(d,lD);});

                // Utility function to be used to update the legend.
                leg.update = function(nD){
                    // update the data attached to the row elements.
                    var l = legend.select("tbody").selectAll("tr").data(nD);

                    // update the frequencies.
                    l.select(".legendFreq").text(function(d){ return d3.format(",")(d.freq);});

                    // update the percentage column.
                    l.select(".legendPerc").text(function(d){ return getLegend(d,nD);});
                }

                function getLegend(d,aD){ // Utility function to compute percentage.
                    return d3.format("%")(d.freq/d3.sum(aD.map(function(v){ return v.freq; })));
                }

                return leg;
            }

            // calculate total frequency by segment for all state.
            var tF = ['php','JavaScript','Ruby', 'Ios'].map(function(d){
                return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))};
            });

            // calculate total frequency by state for all segment.
            var sF = fData.map(function(d){return [d.State,d.total];});

            var hG = histoGram(sF), // create the histogram.
            pC = pieChart(tF), // create the pie-chart.
            leg= legend(tF);  // create the legend.
        }
        </script>

        <script>
        var freqData=[
            {State:'LOUP',freq:{php:{{ membresLoupe[0].membresTotal }}, JavaScript:{{ membresLoupe[1].membresTotal }}, Ruby:{{ membresLoupe[2].membresTotal }}, Ios:{{ membresLoupe[3].membresTotal }}}}
            ,{State:'CHA',freq:{php:{{ membresChartres[0].membresTotal }}, JavaScript:{{ membresChartres[1].membresTotal }}, Ruby:{{ membresChartres[2].membresTotal }}, Ios:{{ membresChartres[3].membresTotal }}}}
            ,{State:'FON',freq:{php:{{membresFontainebleau[0].membresTotal}}, JavaScript:{{membresFontainebleau[1].membresTotal}}, Ruby:{{membresFontainebleau[2].membresTotal}}, Ios:{{membresFontainebleau[3].membresTotal}}}}
            ,{State:'ORL',freq:{php:{{membresOrleans[0].membresTotal}}, JavaScript:{{membresOrleans[1].membresTotal}}, Ruby:{{membresOrleans[2].membresTotal}}, Ios:{{membresOrleans[3].membresTotal}}}}
            ,{State:'LYON',freq:{php:{{membresLyon[0].membresTotal}}, JavaScript:{{membresLyon[1].membresTotal}}, Ruby:{{membresLyon[2].membresTotal}}, Ios:{{membresLyon[3].membresTotal}}}}
            ,{State:'BDX',freq:{php:{{membresBordeaux[0].membresTotal}}, JavaScript:{{membresBordeaux[1].membresTotal}}, Ruby:{{membresBordeaux[2].membresTotal}}, Ios:{{membresBordeaux[3].membresTotal}}}}
            ,{State:'TLS',freq:{php:{{membresToulouse[0].membresTotal}}, JavaScript:{{membresToulouse[1].membresTotal}}, Ruby:{{membresToulouse[2].membresTotal}}, Ios:{{membresToulouse[3].membresTotal}}}}
            ,{State:'PAR',freq:{php:{{ membresParis[0].membresTotal }}, JavaScript: {{membresParis[1].membresTotal}}, Ruby:{{membresParis[2].membresTotal}}, Ios:{{membresParis[3].membresTotal}}}}
            ,{State:'STBG',freq:{php:{{ membresStrasbourg[0].membresTotal }}, JavaScript: {{membresStrasbourg[1].membresTotal}}, Ruby:{{membresStrasbourg[2].membresTotal}}, Ios:{{membresStrasbourg[3].membresTotal}}}}
            ,{State:'NAN',freq:{php:{{ membresNantes[0].membresTotal }}, JavaScript: {{membresNantes[1].membresTotal}}, Ruby:{{membresNantes[2].membresTotal}}, Ios:{{membresNantes[3].membresTotal}}}}
            ,{State:'NIC',freq:{php:{{ membresNice[0].membresTotal }}, JavaScript: {{membresNice[1].membresTotal}}, Ruby:{{membresNice[2].membresTotal}}, Ios:{{membresNice[3].membresTotal}}}}
            ,{State:'MTP',freq:{php:{{ membresMontpellier[0].membresTotal }}, JavaScript: {{membresMontpellier[1].membresTotal}}, Ruby:{{membresMontpellier[2].membresTotal}}, Ios:{{membresMontpellier[3].membresTotal}}}}
            ,{State:'REN',freq:{php:{{ membresRennes[0].membresTotal }}, JavaScript: {{membresRennes[1].membresTotal}}, Ruby:{{membresRennes[2].membresTotal}}, Ios:{{membresRennes[3].membresTotal}}}}
            ,{State:'LIL',freq:{php:{{ membresLille[0].membresTotal }}, JavaScript: {{membresLille[1].membresTotal}}, Ruby:{{membresLille[2].membresTotal}}, Ios:{{membresLille[3].membresTotal}}}}
            ,{State:'BXL',freq:{php:{{ membresBrussels[0].membresTotal }}, JavaScript: {{membresBrussels[1].membresTotal}}, Ruby:{{membresBrussels[2].membresTotal}}, Ios:{{membresBrussels[3].membresTotal}}}}
            ,{State:'LUX',freq:{php:{{ membresLuxembourg[0].membresTotal }}, JavaScript: {{membresLuxembourg[1].membresTotal}}, Ruby:{{membresLuxembourg[2].membresTotal}}, Ios:{{membresLuxembourg[3].membresTotal}}}}
            ,{State:'GEN',freq:{php:{{ membresGeneve[0].membresTotal }}, JavaScript: {{membresGeneve[1].membresTotal}}, Ruby:{{membresGeneve[2].membresTotal}}, Ios:{{membresGeneve[3].membresTotal}}}}
        ];

        dashboard('#dashboard',freqData);
        </script>





    {% endblock %}
